" Misc {{{

set modelines=1            " the last line for set comment
set encoding=utf-8         " default text encoding
set laststatus=2           " always on status line
set nobackup               " turn off backup
set nowritebackup          " only in case you don't want a backup file while editing
set noswapfile             " no swap files
set backupdir=/private/tmp " move backup dir
set dir=/private/tmp       " move swap file dir
set wildignore+=*/tmp/*,*/build/*,*.swp,*.zip

" }}}
" Enhancement {{{

set nocompatible                " unleash vim's power
set backspace=indent,eol,start  " aggresive backspace
set path+=**                    " enable fuzzy search subdirectories

" }}}
" Visual {{{

color dracula
set background=dark
set noshowmode
set number                 " show line numbers
set relativenumber         " show relative line number
set showcmd                " show command in bottom bar
set wildmenu               " visual autocomplete for command menu
set showmatch              " highlight matching [{()}]
set incsearch              " search as characters are entered
set hlsearch               " highlight matches
set cursorline             " highlight cursor line
filetype on                " enable file type detection
filetype indent on         " load filetype-specific indent files
syntax enable              " enable syntax highlighting
let python_highlight_all=1 " enable all Python syntax highlighting features
set guioptions=

" change cursor for different mode
if exists('$TMUX')
  let &t_SI = "\<Esc>Ptmux;\<Esc>\<Esc>]50;CursorShape=1\x7\<Esc>\\"
  let &t_SR = "\<Esc>Ptmux;\<Esc>\<Esc>]50;CursorShape=2\x7\<Esc>\\"
  let &t_EI = "\<Esc>Ptmux;\<Esc>\<Esc>]50;CursorShape=0\x7\<Esc>\\"
else
  let &t_SI = "\<Esc>]50;CursorShape=1\x7"
  let &t_SR = "\<Esc>]50;CursorShape=2\x7"
  let &t_EI = "\<Esc>]50;CursorShape=0\x7"
endif

" }}}
" Tab {{{

set softtabstop=4          " number of spaces in tab when editing
set tabstop=4              " number of visual spaces per TAB
set expandtab              " expand tabs into spaces
set autoindent             " indent when moving to the next line
set shiftwidth=4           " when using the >> or << commands, shift lines by 4 spaces

" }}}
" Folding {{{

set foldenable             " enable folding
set foldlevelstart=10      " open most folds by default
set foldnestmax=10         " 10 nested fold max
set foldmethod=indent      " fold based on indent level

" }}}
" Key Mapping {{{

set pastetoggle=<F2>            " Toggle paste mode
nnoremap <F3> :set invnumber invrelativenumber<CR>

" Change leader key
let mapleader=","       

" Substitube highlighted text
nnoremap <leader>r :%s///g<left><left>

" Clear search highlight
nnoremap <leader><space> :nohlsearch<CR>:echo "Search cleared"<CR>

" Fold/unfold
nnoremap <space> za                      

" Move to line start/end
nnoremap B ^
nnoremap E $

" Navigate among buffers
nnoremap <silent> [b :bprevious<CR>
nnoremap <silent> ]b :bnext<CR>
nnoremap <silent> [B :bfirst<CR>
nnoremap <silent> ]B :blast<CR>

" Save
nmap <c-s> :w<CR>
vmap <c-s> <Esc><c-s>gv
imap <c-s> <Esc><c-s>

" Quick open file
nnoremap <leader>e :e<space>

" Choose a buffer
nnoremap <leader>b :ls<CR>:b<Space>

" }}}
" Snippets {{{

nnoremap ,html :-1read $HOME/.vim/snippets/_skeleton.html<CR>3jwf>a

" }}}
" Plugins {{{

" NERDTree
"
" Ignore files in NERDTree
let NERDTreeIgnore=['\.pyc$', '\~$'] 
" Toggle 
nnoremap <c-n> :NERDTreeToggle<CR>
" Open with current file
nnoremap <silent> <leader>f :NERDTreeFind<CR>
" Auto quit vim when NERDTree is the only buffer
autocmd bufenter * if (winnr("$") == 1 && exists("b:NERDTree") && b:NERDTree.isTabTree()) | q | endif

" lightline.vim
"
let g:lightline = {
      \ 'colorscheme': 'wombat',
      \ }

" ctrlp
"
" Limit index to current 'pwd' only
let g:ctrlp_working_path_mode = ''
" Ignore files in .gitignore
let g:ctrlp_user_command = ['.git', 'cd %s && git ls-files -co --exclude-standard']
" Custom ignore
let g:ctrlp_custom_ignore = '\v[\/]\.(git|hg|svn)$'
let g:ctrlp_custom_ignore = {
  \ 'dir':  '\v[\/]\.(git|hg|svn)$',
  \ 'file': '\v\.(exe|so|dll)$',
  \ 'link': 'some_bad_symbolic_links',
  \ }

" }}}
" vim:foldmethod=marker:foldlevel=0
